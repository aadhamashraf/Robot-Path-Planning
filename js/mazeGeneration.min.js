var generation,finished=!0,current,path,paths,grids=[],breakWallChance=.01,splitChance=.1;function generateMaze_backtracker(){grid.start.setCol(grid.grid[0][0]);grid.end.setCol(grid.grid[grid.grid.length-1][grid.grid[grid.grid.length-1].length-1]);for(var b=0;b<grid.grid.length;b++)for(var a=0;a<grid.grid[b].length;a++)grid.grid[b][a].setType("wall");finished=!1;current=grid.grid[0][0];path=[current];backtrackerStep()}
function backtrackerStep(){if(stopGenerate)return stopGenerate=!1;path.push(current);var b=[];0<current.y&&"wall"===grid.grid[current.y-1][current.x].type&&backtracker_checkNeighbors(current.x,current.y-1,"u")&&0<current.x&&b.push(grid.grid[current.y-1][current.x]);0<current.x&&"wall"===grid.grid[current.y][current.x-1].type&&backtracker_checkNeighbors(current.x-1,current.y,"l")&&0<current.y&&b.push(grid.grid[current.y][current.x-1]);current.y<grid.rows-1&&"wall"===grid.grid[current.y+1][current.x].type&&
backtracker_checkNeighbors(current.x,current.y+1,"d")&&b.push(grid.grid[current.y+1][current.x]);current.x<grid.cols-1&&"wall"===grid.grid[current.y][current.x+1].type&&backtracker_checkNeighbors(current.x+1,current.y,"r")&&b.push(grid.grid[current.y][current.x+1]);if(0===b.length){if(0===current.x&&0===current.y||0===path.length)return finished=!0,backtracker_clear(),!1;current.setType("empty");path.pop();current=path.pop();setTimeout(backtrackerStep,map(speed.value,0,100,500,20));return!1}current=
b[Math.floor(Math.random()*b.length)];current.setType("path");setTimeout(backtrackerStep,map(speed.value,0,100,500,20))}function generateMaze_backtracker_multi(){console.log("Generating backtracker-multi");grid.start.setCol(grid.grid[0][0]);grid.end.setCol(grid.grid[grid.grid.length-1][grid.grid[grid.grid.length-1].length-1]);for(var b=0;b<grid.grid.length;b++)for(var a=0;a<grid.grid[b].length;a++)grid.grid[b][a].setType("wall");finished=!1;paths=[[grid.grid[0][0]]];backtrackerMultiStep()}
function backtrackerMultiStep(){if(stopGenerate)return stopGenerate=!1;for(var b=paths.length-1;0<=b;b--)if(0===paths[b].length){if(1===paths.length)return finished=!0,backtracker_clear(),!1;paths.splice(b,1)}else{var a=paths[b][paths[b].length-1],c=[];0<a.y&&"wall"===grid.grid[a.y-1][a.x].type&&backtracker_checkNeighbors(a.x,a.y-1,"u")&&0<a.x&&c.push(grid.grid[a.y-1][a.x]);0<a.x&&"wall"===grid.grid[a.y][a.x-1].type&&backtracker_checkNeighbors(a.x-1,a.y,"l")&&0<a.y&&c.push(grid.grid[a.y][a.x-1]);
a.y<grid.rows-1&&"wall"===grid.grid[a.y+1][a.x].type&&backtracker_checkNeighbors(a.x,a.y+1,"d")&&c.push(grid.grid[a.y+1][a.x]);a.x<grid.cols-1&&"wall"===grid.grid[a.y][a.x+1].type&&backtracker_checkNeighbors(a.x+1,a.y,"r")&&c.push(grid.grid[a.y][a.x+1]);if(0===c.length)if(0===paths[b].length){if(1===paths.length)return finished=!0,backtracker_clear(),!1;paths.splice(b,1)}else a.setType("empty"),paths[b].pop();else{var a=Math.floor(Math.random()*c.length),d=c[a];c.splice(a,1);d.setType("path");paths[b].push(d);
0<c.length&&Math.random()<splitChance/paths.length&&(c=c[Math.floor(Math.random()*c.length)],a=[],c.setType("path"),a.push(c),paths.push(a))}}setTimeout(backtrackerMultiStep,map(speed.value,0,100,500,20))}
function backtracker_checkNeighbors(b,a,c){c=void 0===c?null:c;return 0<b&&(0<a&&"wall"!==grid.grid[a][b-1].type&&"wall"!==grid.grid[a-1][b].type&&"wall"!==grid.grid[a-1][b-1].type||a<grid.rows-1&&"wall"!==grid.grid[a][b-1].type&&"wall"!==grid.grid[a+1][b].type&&"wall"!==grid.grid[a+1][b-1].type)||b<grid.cols-1&&(0<a&&"wall"!==grid.grid[a][b+1].type&&"wall"!==grid.grid[a-1][b].type&&"wall"!==grid.grid[a-1][b+1].type||a<grid.rows-1&&"wall"!==grid.grid[a][b+1].type&&"wall"!==grid.grid[a+1][b].type&&
"wall"!==grid.grid[a+1][b+1].type)?!1:c?backtracker_checkWallBreak(b,a,c):!0}
function backtracker_checkWallBreak(b,a,c){var d=Math.random();switch(c){case "u":if(0<b&&0<a&&b<grid.cols-1&&("wall"!==grid.grid[a][b-1].type||"wall"!==grid.grid[a][b+1].type||"wall"!==grid.grid[a-1][b].type)){if(d>=breakWallChance)return!1}else if(0<b&&0<a&&b>=grid.cols-1&&("wall"!==grid.grid[a][b-1].type||"wall"!==grid.grid[a-1][b].type)){if(d>=breakWallChance)return!1}else if(0<b&&0>=a&&b<grid.cols-1&&("wall"!==grid.grid[a][b-1].type||"wall"!==grid.grid[a][b+1].type)){if(d>=breakWallChance)return!1}else if(0>=
b&&0<a&&b<grid.cols-1&&("wall"!==grid.grid[a][b+1].type||"wall"!==grid.grid[a-1][b].type)&&d>=breakWallChance)return!1;break;case "l":if(0<b&&0<a&&a<grid.rows-1&&("wall"!==grid.grid[a][b-1].type||"wall"!==grid.grid[a-1][b].type||"wall"!==grid.grid[a+1][b].type)){if(d>=breakWallChance)return!1}else if(0<b&&0<a&&a>=grid.rows-1&&("wall"!==grid.grid[a][b-1].type||"wall"!==grid.grid[a-1][b].type)){if(d>=breakWallChance)return!1}else if(0<b&&0>=a&&a<grid.rows-1&&("wall"!==grid.grid[a][b-1].type||"wall"!==
grid.grid[a+1][b].type)){if(d>=breakWallChance)return!1}else if(0>=b&&0<a&&a<grid.rows-1&&("wall"!==grid.grid[a-1][b].type||"wall"!==grid.grid[a+1][b].type)&&d>=breakWallChance)return!1;break;case "d":if(0<b&&a<grid.rows-1&&b<grid.cols-1&&("wall"!==grid.grid[a][b-1].type||"wall"!==grid.grid[a+1][b].type||"wall"!==grid.grid[a+1][b].type)){if(d>=breakWallChance)return!1}else if(0<b&&a<grid.rows-1&&b>=grid.cols-1&&("wall"!==grid.grid[a][b-1].type||"wall"!==grid.grid[a+1][b].type)){if(d>=breakWallChance)return!1}else if(0<
b&&a>=grid.rows-1&&b<grid.cols-1&&("wall"!==grid.grid[a][b-1].type||"wall"!==grid.grid[a][b+1].type)){if(d>=breakWallChance)return!1}else if(0>=b&&a<grid.rows-1&&b<grid.cols-1&&("wall"!==grid.grid[a+1][b].type||"wall"!==grid.grid[a][b+1].type)&&d>=breakWallChance)return!1;break;case "r":if(b<grid.cols-1&&0<a&&a<grid.rows-1&&("wall"!==grid.grid[a][b+1].type||"wall"!==grid.grid[a-1][b].type||"wall"!==grid.grid[a+1][b].type)){if(d>=breakWallChance)return!1}else if(b<grid.cols-1&&0<a&&a>=grid.rows-1&&
("wall"!==grid.grid[a][b+1].type||"wall"!==grid.grid[a-1][b].type)){if(d>=breakWallChance)return!1}else if(b<grid.cols-1&&0>=a&&a<grid.rows-1&&("wall"!==grid.grid[a][b+1].type||"wall"!==grid.grid[a+1][b].type)){if(d>=breakWallChance)return!1}else if(b>=grid.cols-1&&0<a&&a<grid.rows-1&&("wall"!==grid.grid[a-1][b].type||"wall"!==grid.grid[a+1][b].type)&&d>=breakWallChance)return!1}return!0}
function backtracker_clear(){for(var b=0;b<grid.grid.length;b++)for(var a=0;a<grid.grid[b].length;a++)"wall"!==grid.grid[b][a].type&&grid.grid[b][a].setType("empty");grid.start.setCol(grid.grid[0][0]);grid.end.setCol(grid.grid[grid.grid.length-1][grid.grid[grid.grid.length-1].length-1])}
function generateMaze_huntAndKill(){grid.start.setCol(grid.grid[0][0]);grid.end.setCol(grid.grid[grid.grid.length-1][grid.grid[grid.grid.length-1].length-1]);for(var b=0;b<grid.grid.length;b++)for(var a=0;a<grid.grid[b].length;a++)grid.grid[b][a].setType("wall");finished=!1;current=grid.grid[0][0];huntAndKillStep()}
function huntAndKillStep(){if(stopGenerate)return stopGenerate=!1;var b=[];0<current.y&&"wall"===grid.grid[current.y-1][current.x].type&&backtracker_checkNeighbors(current.x,current.y-1,"u")&&0<current.x&&b.push(grid.grid[current.y-1][current.x]);0<current.x&&"wall"===grid.grid[current.y][current.x-1].type&&backtracker_checkNeighbors(current.x-1,current.y,"l")&&0<current.y&&b.push(grid.grid[current.y][current.x-1]);current.y<grid.rows-1&&"wall"===grid.grid[current.y+1][current.x].type&&backtracker_checkNeighbors(current.x,
current.y+1,"d")&&b.push(grid.grid[current.y+1][current.x]);current.x<grid.cols-1&&"wall"===grid.grid[current.y][current.x+1].type&&backtracker_checkNeighbors(current.x+1,current.y,"r")&&b.push(grid.grid[current.y][current.x+1]);if(0===b.length){for(b=0;b<grid.grid.length;b++)for(var a=0;a<grid.grid[b].length;a++)"path"===grid.grid[b][a].type&&grid.grid[b][a].setType("empty");setTimeout(huntAndKillScanStep,map(speed.value,0,100,500,20));return!1}current=b[Math.floor(Math.random()*b.length)];current.setType("path");
setTimeout(huntAndKillStep,map(speed.value,0,100,500,20))}
function huntAndKillScanStep(b,a,c){b=void 0===b?0:b;a=void 0===a?null:a;c=void 0===c?"":c;for(var d=0;d<grid.cols;d++){a&&a.setType(c);var e=grid.grid[b][d];a=e;c=e.type;e.setType("searched");if("wall"===c&&backtracker_checkNeighbors(d,b,"d"))return current=e,current.setType("path"),setTimeout(huntAndKillStep,map(speed.value,0,100,500,20)),!1}b++;if(b>=grid.rows)return finished=!0,backtracker_clear(),!1;setTimeout(function(){huntAndKillScanStep(b,a,c)},map(speed.value,0,100,200,10))}
function generateMaze_recursiveDivision(){console.log("Generating Recursive division");grid.resetGrid();grid.start.setCol(grid.grid[0][0]);grid.end.setCol(grid.grid[grid.grid.length-1][grid.grid[grid.grid.length-1].length-1]);grids=[grid.getGrid()];finished=!1;recursiveDivisionStep()}
function recursiveDivisionStep(){if(stopGenerate)return stopGenerate=!1;if(0===grids.length)return finished=!0;var b=grids.length-1;if(2>=grids[b].length||2>=grids[b][0].length)return grids.splice(b,1),recursiveDivisionStep(),!1;splitGrid(b);setTimeout(recursiveDivisionStep,map(speed.value,0,100,500,20))}function splitGrid(b){var a=grids[b].length,c=grids[b][0].length,d=grids[b];a>c||a===c&&.5>=Math.random()?splitGridHorizontal(d,a,c):splitGridVertical(d,a,c);grids.splice(b,1)}
function splitGridHorizontal(b,a,c){a=Math.floor(a/2)+Math.round(Math.random()*a/3-a/6);0===a%2&&a++;var d=Math.round(Math.random()*(c-1));1===d%2&&(.5>=Math.random()?d++:d--);for(var e=0;e<c;e++)e!==d&&b[a][e].setType("wall");c=b.slice(0,a);b=b.slice(a+1);grids.push(c);grids.push(b)}
function splitGridVertical(b,a,c){c=Math.floor(c/2)+Math.round(Math.random()*c/3-c/6);0===c%2&&c++;var d=Math.round(Math.random()*(a-1));1===d%2&&(.5>=Math.random()?d++:d--);for(var e=[],g=[],f=0;f<a;f++)f!==d&&b[f][c].setType("wall"),e.push(b[f].slice(0,c)),g.push(b[f].slice(c+1));grids.push(e);grids.push(g)};
