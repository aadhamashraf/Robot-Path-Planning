from Basic_Attributes import *

<<<<<<< HEAD
""" BFS Algorithm """


def bfs(start, goal, grid):
    startTime = time.time()
=======
# BFS Algorithm 
'''
The following BFS Algorithm is Generated by AI Tool to only ensure that maze is solvable refer to : 
Trial_AI_15_11 > Environment > mazeSetup > is_solvable(maze, start, goal)
'''

def bfs(maze, start, goal):
    visited = [[False] * MAZE_WIDTH for _ in range(MAZE_HEIGHT)]
>>>>>>> 13dae46523ddcaa7a8216d4c3bff890f40393ea4
    queue = deque([start])
    parent = {start: None}

    visited[start[1]][start[0]] = True

    while queue:
<<<<<<< HEAD
        current = queue.popleft()
        frontier.add(current)
        steps += 1
        if current == goal:
            break
        for i, (dx, dy) in enumerate(DIRECTIONS):
            nx, ny = current[0] + dx, current[1] + dy
            if 0 <= nx < len(grid[0]) and 0 <= ny < len(grid) and not grid[ny][nx].walls[(i + 2) % 4]:
                if (nx, ny) not in parent:
                    parent[(nx, ny)] = current
                    queue.append((nx, ny))
    path = []
    current = goal
    while current != start:
        path.append(current)
        current = parent[current]
    endTime = time.time()
    # final_time_taken =
    return path[::-1], frontier, steps, endTime-startTime


""" DFS Algorithm """


def dfs(start, goal, grid):
    startTime = time.time()
    stack = [start]
    parent = {start: None}
    frontier = set()
    steps = 0
=======
        x, y = queue.popleft()
        print(f"Exploring BFS: ({x}, {y})") 

        if (x, y) == goal:
            path = []
            while parent[(x, y)] is not None:
                path.append((x, y))
                x, y = parent[(x, y)]
            path.append(start)
            return path[::-1]
        
        # DIRECTIONS = [(0, 1), (1, 0), (0, -1), (-1, 0)]
        for dx, dy in DIRECTIONS:
            nx, ny = x + dx, y + dy
            if 0 <= nx < MAZE_WIDTH and 0 <= ny < MAZE_HEIGHT and not visited[ny][nx] and maze[ny][nx] == 0:
                visited[ny][nx] = True
                queue.append((nx, ny))
                parent[(nx, ny)] = (x, y)
>>>>>>> 13dae46523ddcaa7a8216d4c3bff890f40393ea4

    return None

<<<<<<< HEAD
    path = []
    current = goal
    while current != start:
        path.append(current)
        current = parent[current]
    endTime = time.time()
    return path[::-1], frontier, steps, endTime-startTime

=======
# DFS Algorithm 
>>>>>>> 13dae46523ddcaa7a8216d4c3bff890f40393ea4

# IDS Algorithm

# UCS Algorithm

<<<<<<< HEAD
""" IDS Algorithm """


def ids(start, goal, grid, l=1):
    startTime = time.time()
    stack = [start]
    parent = {start: None}
    frontier = set()
    steps = 0
    current = 0
    while stack:
        current = stack.pop()
        frontier.add(current)
        steps += 1
        if current == goal:
            break
        if l == 0:
            break
        for i, (dx, dy) in enumerate(DIRECTIONS):
            nx, ny = current[0] + dx, current[1] + dy
            if 0 <= nx < len(grid[0]) and 0 <= ny < len(grid) and not grid[ny][nx].walls[(i + 2) % 4]:
                if (nx, ny) not in parent:
                    parent[(nx, ny)] = current
                    stack.append((nx, ny))
        l -= 1
    path = []

    while current != start:
        path.append(current)
        current = parent[current]
    endTime = time.time()
    return path[::-1], frontier, steps, endTime-startTime
=======
>>>>>>> 13dae46523ddcaa7a8216d4c3bff890f40393ea4
