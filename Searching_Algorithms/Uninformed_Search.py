from Basic_Attributes import *

# BFS Algorithm 
'''
The following BFS Algorithm is Generated by AI Tool to only ensure that maze is solvable refer to : 
Trial_AI_15_11 > Environment > mazeSetup > is_solvable(maze, start, goal)
'''

def bfs(maze, start, goal):
    visited = [[False] * MAZE_WIDTH for _ in range(MAZE_HEIGHT)]
    queue = deque([start])
    parent = {start: None}

    visited[start[1]][start[0]] = True

    while queue:
        x, y = queue.popleft()
        print(f"Exploring BFS: ({x}, {y})") 

        if (x, y) == goal:
            path = []
            while parent[(x, y)] is not None:
                path.append((x, y))
                x, y = parent[(x, y)]
            path.append(start)
            return path[::-1]

        for dx, dy in DIRECTIONS:
            nx, ny = x + dx, y + dy
            if 0 <= nx < MAZE_WIDTH and 0 <= ny < MAZE_HEIGHT and not visited[ny][nx] and maze[ny][nx] == 0:
                visited[ny][nx] = True
                queue.append((nx, ny))
                parent[(nx, ny)] = (x, y)

    return None

# DFS Algorithm 

# IDS Algorithm

# UCS Algorithm

